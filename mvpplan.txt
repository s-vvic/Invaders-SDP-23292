---
# 1. 백엔드 서버 (Java, Javalin, Maven) - 핵심 동작 우선
---
## 1-1. 의존성 (jbcrypt 등 제거)
- [ ] Javalin, SQLite-JDBC, Jackson, JJWT, SLF4J/Logback만 사용.

## 1-2. 데이터베이스 (단순화)
- [ ] `users` 테이블만 사용: user_id, username (Plain Text), password (Plain Text), max_score.
- [ ] 점수, 지갑, 업그레이드 등 기타 테이블 설계는 MVP 이후로 보류.

## 1-3. API 상세 설계 (단순 JWT)
- [ ] 인증 방식: **단일 Access Token** (짧은 만료 시간) 사용. Refresh Token 제거.
- [ ] 보안 기능: **BCrypt 해싱, Rate Limiting, 입력 유효성 검사** 제거. (최소 구현 목표)
- [ ] 엔드포인트:
    - POST /api/register (평문 ID/PW)
    - POST /api/login (평문 ID/PW)
    - POST /api/score (최고 점수 업데이트)
    - GET /api/dashboard (사용자 정보/최고 점수 조회)

## 1-4. 정적 파일
- [ ] 웹페이지(HTML, CSS, JS) 제공 설정.

---
# 2. 게임 클라이언트 연동 (Java) - 로그인 및 게스트 모드
---
## 2-1. 모드 및 UI
- [ ] **게스트 모드 지원**: 로그인 없이 "Play" 가능. 단, 게스트의 모든 플레이 기록(점수 등)은 게임 종료 시 저장되지 않고 사라짐.
- [ ] **로그인 모드**: 로그인해야 점수 등 플레이 기록이 서버에 저장됨.
- [ ] Login/Register 화면 구현. 오류 메시지는 서버 원문을 단순 표시.

## 2-2. 데이터 동기화
- [ ] 게임 시작: 로그인 상태일 경우에만 GET /api/dashboard 호출.
- [ ] 게임 종료: 로그인 상태일 경우에만 POST /api/score로 점수 전송. (게스트는 아무것도 안 함)

## 2-3. 인증 토큰 저장
- [ ] 단일 Access Token을 Java Preferences API에 저장.
- [ ] **토큰 만료 시 재로그인 유도** (자동 갱신 로직 제거).

---
# 3. 웹 프론트엔드 (HTML, CSS, JS) - 기능 최소화
---
## 3-1. 보안 및 기능
- [ ] **단일 Access Token**을 **localStorage**에 저장. (보안 이슈 감수)
- [ ] 회원 정보/비밀번호 변경 페이지 제거.

## 3-2. 파일 구조 및 구현
- [ ] 파일 최소화: index.html, style.css, **main.js** (모든 JS 로직 통합).
- [ ] UI/UX 단순화: 로딩 상태/고급 에러 피드백 제거. API 오류는 alert() 등으로 처리.

## 3-3. 대시보드
- [ ] 필수 정보(이름, 최고 점수)만 표시.