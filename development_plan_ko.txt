# 최종 개발 계획서 (v5.1 - 프론트엔드 상세 복구)

## 1. 백엔드 서버 (Java, Javalin, Maven)

### 1-1. Maven 프로젝트 설정
- Java Maven 프로젝트를 새로 생성합니다.
- `pom.xml` 파일에 다음 의존성을 추가합니다:
  - `Javalin`, `SQLite-JDBC`, `Jackson`, `JJWT`, `jbcrypt`, `SLF4J/Logback`

### 1-2. 데이터베이스 설계 및 트랜잭션
- `users`, `user_upgrades`, `scores`, `achievements`, `wallets` 테이블을 설계합니다.
- 여러 데이터가 동시에 변경되는 작업은 **데이터베이스 트랜잭션**으로 묶어 데이터 무결성을 보장합니다.

### 1-3. API 상세 설계

#### 가. 보안 및 인증
- **비밀번호 저장**: **BCrypt**와 **Salt**를 사용하여 비밀번호를 안전하게 해싱하여 저장합니다.
- **인증 방식 (JWT Refresh Token)**: `AccessToken`과 `RefreshToken`을 함께 사용해 보안과 사용자 편의성을 모두 확보합니다.

#### 나. RESTful API 엔드포인트
- **입력 유효성 검사** 및 **속도 제한(Rate Limiting)**을 구현합니다.
- **엔드포인트 목록**: `POST /api/auth/register`, `POST /api/auth/login`, `POST /api/auth/refresh`, `GET /api/users/me`, `PUT /api/users/me/password`, `POST /api/scores`, `PUT /api/upgrades`, `PUT /api/wallet`

#### 다. 에러 처리 및 로깅
- 명확한 HTTP 상태 코드를 사용하고, 모든 요청 및 에러에 대한 상세한 로그를 기록합니다.

### 1-4. 정적 파일 제공 설정
- 웹페이지(HTML, CSS, JS) 파일을 제공하도록 Javalin 서버를 설정합니다.

---

## 2. 게임 클라이언트 연동 (Java)

### 2-1. UI 흐름 및 화면 설계
- `TitleScreen`, `LoginScreen`, `RegisterScreen`의 상세 흐름을 구현하고, 사용자 친화적인 오류 메시지를 표시합니다.

### 2-2. 게스트/로그인 모드 및 데이터 동기화
- **게스트 모드**: 로컬 저장, 상점 이용 시 경고 메시지 표시.
- **로그인 모드**: 모든 진행 상황 서버에 영구 저장.
- **게스트 -> 로그인 전환**: 로컬 데이터의 서버 업로드 흐름을 구현합니다.
- **중간 저장**: 데이터 유실 방지를 위해 특정 구간마다 데이터를 저장합니다.

### 2-3. 인증 및 토큰 관리
- **토큰 저장**: `Java Preferences API`를 사용하여 Access/Refresh Token을 로컬에 저장합니다.
- **토큰 자동 관리**: AccessToken 만료 시 RefreshToken을 사용해 자동으로 갱신하는 로직을 구현합니다.

---

## 3. 웹 프론트엔드 (HTML, CSS, JavaScript)

### 3-1. 보안 및 인증
- **(개선) 토큰 저장**: 보안 강화를 위해, `RefreshToken`은 서버에서 발급하는 **`HttpOnly` 쿠키**에 저장합니다. `AccessToken`은 JavaScript 변수(메모리)에 저장하여 사용합니다.

### 3-2. 기본 파일 및 페이지 제작
- **파일 구조**: 역할 분리를 위해 `index.html` 외에 `api.js`(서버 통신), `ui.js`(화면 렌더링), `auth.js`(로그인/인증 관리) 등으로 JS 파일을 분리합니다.
- **로그인 페이지**: `index.html`에 로그인 폼을 만들고, `auth.js`에서 로그인/로그아웃 기능을 구현합니다.
- **(신규) 회원 정보/비밀번호 변경 페이지**: 관련 페이지의 HTML 구조를 만들고, `api.js`를 통해 서버와 통신하는 기능을 구현합니다.

### 3-3. 대시보드 페이지 상세 설계
- **레이아웃**:
  - **상단**: "환영합니다, [사용자이름]님" 메시지, "로그아웃" 버튼
  - **중앙**: "최고 점수", "보유 골드" 정보 표시
  - **하단**: "업그레이드 현황", "달성 업적" 목록 표시
- **동적 렌더링**: `ui.js`에서 서버 데이터를 받아와 대시보드 화면을 동적으로 그립니다.
- **(개선) UX**: API 통신 중에는 로딩 상태를 표시하고, 오류 발생 시 명확한 피드백을 사용자에게 보여줍니다.

### 3-4. (참고) 프레임워크
- 기능이 복잡해짐에 따라, 향후 **React/Vue**와 같은 SPA 프레임워크로 전환하는 것을 고려할 수 있습니다.

---

## 4. 개발 환경 및 프로세스

- **버전 관리**: **Git**을 사용하여 모든 코드 변경 사항을 체계적으로 관리합니다.
- **테스트**: 핵심 로직 및 API 엔드포인트에 대한 **단위 테스트(Unit Test)** 코드를 작성하여 코드의 안정성을 보장합니다.
- **배포**: **Docker**를 사용하여 개발 환경을 컨테이너화하는 것을 검토합니다.